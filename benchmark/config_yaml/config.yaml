# ============================================================
# Benchmark Configuration
# ============================================================
# This file configures the database benchmark experiments.
# Edit the parameters below to customize your benchmark runs.

# ------------------------------------------------------------
# Execution Parameters
# ------------------------------------------------------------

# engines: List of database engines to benchmark
# Supported values: duckdb, sqlite, chdb
engines: [duckdb, sqlite, chdb]

# repeat_pilot: Number of pilot runs to calculate sampling interval
# Purpose: Stage 1/2 runs this many times with DEFAULT_PIVOT_INTERVAL (10s)
# to estimate query execution time and determine optimal monitoring interval
# Formula: sampling_interval = avg_execution_time / sample_count
# Default: 3 runs
repeat_pilot: 3

# sample_count: Target number of monitoring samples during query execution
# Purpose: Used to calculate monitoring interval = avg_time / sample_count
# Higher values = more granular CPU/memory monitoring but more overhead
# Default: 10 samples per query
sample_count: 10

# std_repeat: Number of actual benchmark iterations (Stage 2/2)
# Purpose: Main benchmark runs for statistical analysis (avg, p50, p95, p99)
# Higher values = more accurate statistics but longer execution time
# Default: 5 runs
std_repeat: 5

# output_cwd: Output directory for results
# Structure: output_cwd/
#   ├── summary.json (aggregated results for all experiments)
#   └── <experiment_name>/ (individual run logs and profiling data)
output_cwd: ./results

# ------------------------------------------------------------
# Engine Paths
# ------------------------------------------------------------

# Database engine executables: could be system-installed or custom builds
# 3 options: system path, relative path, absolute path
# Examples:
#   sqlite: sqlite3  # system-installed sqlite (in PATH)
#   sqlite: /home/<username>/dataset_analytics/sqlite/bin/sqlite3
#   sqlite: ../sqlite/bin/sqlite3
engine_paths:
  duckdb: duckdb
  sqlite: sqlite3
  chdb: ./chdb_cli/chdb_cli

# chdb_library_path: Path to chDB shared library (libchdb.so)
# Provide for macOS / Linux if don't set default system path
chdb_library_path: /usr/local/lib

# ------------------------------------------------------------
# Datasets
# ------------------------------------------------------------

# datasets: List of database files to benchmark
# Each dataset can have different database files for each engine
datasets:
  - name: vs14  # Dataset identifier
    duckdb_db: ./db_vs14/vs14_data.duckdb  # DuckDB database file
    sqlite_db: ./db_vs14/vs14_data.sqlite  # SQLite database file
    chdb_db_dir: ./db_vs14/vs14_data_chdb  # chDB database directory

# ------------------------------------------------------------
# Query Groups
# ------------------------------------------------------------

# query_groups: SQL queries to execute on each database
# Each query group can have engine-specific SQL files
query_groups:
  - id: sample-Q1  # Query identifier (used in validate_pairs, execute_pairs, compare_pairs)
    duckdb_sql: ./queries/Q1/Q1_duckdb.sql
    sqlite_sql: ./queries/Q1/Q1_sqlite.sql
    chdb_sql: ./queries/Q1/Q1_chdb.sql
    duckdb_sql_ban_ops: ./queries/Q1/Q1_duckdb_ban_ops.sql
    sqlite_sql_ban_ops: ./queries/Q1/Q1_sqlite_ban_ops.sql
    chdb_sql_ban_ops: ./queries/Q1/Q1_chdb_ban_ops.sql

  - id: anomaly-Q1
    duckdb_sql: queries/anomaly/Q2_duckdb.sql
    sqlite_sql: queries/anomaly/Q2_sqlite.sql
    chdb_sql: queries/anomaly/Q1_chdb.sql
  - id: anomaly-Q2
    duckdb_sql: queries/anomaly/Q2_duckdb.sql
    sqlite_sql: queries/anomaly/Q2_sqlite.sql
    # chdb_sql: queries/anomaly/Q2_chdb.sql
  - id: anomaly-Q3
    duckdb_sql: queries/anomaly/Q3_duckdb.sql
    sqlite_sql: queries/anomaly/Q3_sqlite.sql
    chdb_sql: queries/anomaly/Q3_chdb.sql
  - id: anomaly-Q4
    duckdb_sql: queries/anomaly/Q4_duckdb.sql
    sqlite_sql: queries/anomaly/Q4_sqlite.sql
    chdb_sql: queries/anomaly/Q4_chdb.sql

  - id: trend-Q1
    duckdb_sql: queries/trend/Q1_duckdb.sql
  - id: trend-Q2
    duckdb_sql: queries/trend/Q2_duckdb.sql
  - id: trend-Q3
    duckdb_sql: queries/trend/Q3_duckdb.sql
  - id: trend-Q4
    duckdb_sql: queries/trend/Q4_duckdb.sql
  - id: trend-Q5
    duckdb_sql: queries/trend/Q5_duckdb.sql

  - id: category-Q1
    duckdb_sql: queries/category/Q1_duckdb.sql
    sqlite_sql: queries/category/Q1_sqlite.sql
    chdb_sql: queries/category/Q1_chdb.sql
  - id: category-Q2
    duckdb_sql: queries/category/Q2_duckdb.sql
    sqlite_sql: queries/category/Q2_sqlite.sql
    chdb_sql: queries/category/Q2_chdb.sql
  - id: category-Q3
    duckdb_sql: queries/category/Q3_duckdb.sql
    sqlite_sql: queries/category/Q3_sqlite.sql
    chdb_sql: queries/category/Q3_chdb.sql
  - id: category-Q4
    duckdb_sql: queries/category/Q4_duckdb.sql
    sqlite_sql: queries/category/Q4_sqlite.sql
    chdb_sql: queries/category/Q4_chdb.sql
  
  - id: tremor_detection-Q1
    duckdb_sql: queries/tremor_detection/Q1_duckdb.sql
    sqlite_sql: queries/tremor_detection/Q1_sqlite.sql
    chdb_sql: ./queries/tremor_detection/Q1_chdb.sql
    duckdb_sql_ban_ops: ./queries/tremor_detection/Q1_duckdb_ban_ops.sql
    chdb_sql_ban_ops: ./queries/tremor_detection/Q1_chdb_ban_ops.sql

  - id: tremor_detection-Q2
    duckdb_sql: queries/tremor_detection/Q2_duckdb.sql
    sqlite_sql: queries/tremor_detection/Q2_sqlite.sql
    chdb_sql: ./queries/tremor_detection/Q2_chdb.sql
    duckdb_sql_ban_ops: ./queries/tremor_detection/Q2_duckdb_ban_ops.sql
    chdb_sql_ban_ops: ./queries/tremor_detection/Q2_chdb_ban_ops.sql

  - id: tremor_detection-Q3
    duckdb_sql: queries/tremor_detection/Q3_duckdb.sql
    sqlite_sql: queries/tremor_detection/Q3_sqlite.sql
    chdb_sql: ./queries/tremor_detection/Q3_chdb.sql
    duckdb_sql_ban_ops: ./queries/tremor_detection/Q3_duckdb_ban_ops.sql
    chdb_sql_ban_ops: ./queries/tremor_detection/Q3_chdb_ban_ops.sql
