name: Run Benchmark Experiments

on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/run-experiment.yml
      - benchmark/**

jobs:
  run-experiments:
    runs-on: ubuntu-22.04

    env:
      # SQLite snapshot configuration
      SNAP_URL: https://sqlite.org/2025/sqlite-src-3500400.zip
      PREFIX: /usr/local
      CFLAGS: -O2 -DSQLITE_ENABLE_STMT_SCANSTATUS
      # Python environment
      PYTHON_VERSION: "3.12"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ============================================================
      # Step 1: Build SQLite with profiling support
      # ============================================================
      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config unzip

      - name: Download and extract SQLite source
        shell: bash
        run: |
          set -euo pipefail
          curl -L "$SNAP_URL" -o sqlite.zip
          unzip -q sqlite.zip
          # The first path component in the ZIP is the snapshot root directory
          ROOT_DIR=$(unzip -Z1 sqlite.zip | head -1 | cut -d/ -f1)
          echo "ROOT_DIR=$ROOT_DIR" >> "$GITHUB_ENV"
          echo "Snapshot root: $ROOT_DIR"
          test -d "$ROOT_DIR"

      - name: Configure SQLite
        working-directory: ${{ env.ROOT_DIR }}
        run: |
          set -euxo pipefail
          ./configure --prefix="${PREFIX}" --enable-shared CFLAGS="${CFLAGS}"

      - name: Build SQLite
        working-directory: ${{ env.ROOT_DIR }}
        run: make

      - name: Verify SQLITE_ENABLE_STMT_SCANSTATUS
        working-directory: ${{ env.ROOT_DIR }}
        run: |
          echo "Verifying SQLITE_ENABLE_STMT_SCANSTATUS is enabled..."
          
          # Check with sqlite3 command line (most reliable)
          if [ -f "./sqlite3" ]; then
            echo ""
            echo "Checking compile options via sqlite3 command:"
            if ./sqlite3 :memory: "PRAGMA compile_options;" | grep -i stmt_scanstatus; then
              echo "✓ SQLITE_ENABLE_STMT_SCANSTATUS is ENABLED"
            else
              echo "✗ SQLITE_ENABLE_STMT_SCANSTATUS is NOT enabled"
              echo ""
              echo "Available compile options:"
              ./sqlite3 :memory: "PRAGMA compile_options;"
              exit 1
            fi
          else
            echo "⚠ Warning: sqlite3 executable not found"
            exit 1
          fi

      - name: Install SQLite to staging directory
        working-directory: ${{ env.ROOT_DIR }}
        run: |
          mkdir -p staging/sqlite3
          make install DESTDIR=$(pwd)/staging/sqlite3 prefix=""

      - name: Set up SQLite environment
        working-directory: ${{ env.ROOT_DIR }}
        run: |
          # Copy built SQLite to system location for experiments
          sudo cp -r staging/sqlite3/* "${PREFIX}/"
          sudo ldconfig
          
          # Verify installation
          echo "Verifying SQLite installation..."
          sqlite3 --version
          which sqlite3
          
          # Verify profiling support in installed version
          echo "Verifying profiling support in installed version:"
          sqlite3 :memory: "PRAGMA compile_options;" | grep -i stmt_scanstatus

      # ============================================================
      # Step 2: Set up Python environment and dependencies
      # ============================================================
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || echo "No requirements.txt found, installing common packages..."
          # Install common packages needed for benchmarks
          pip install matplotlib numpy pyyaml

      # ============================================================
      # Step 3: Run benchmark experiments
      # ============================================================
      - name: Run experiments
        working-directory: benchmark
        run: |
          echo "Starting benchmark experiments..."
          python run_experiments.py
          echo "✓ Experiments completed"

      # ============================================================
      # Step 4: Analyze results
      # ============================================================
      - name: Analyze results
        working-directory: benchmark
        run: |
          echo "Analyzing benchmark results..."
          python analyze_results.py
          echo "✓ Analysis completed"

      # ============================================================
      # Step 5: Display and upload results
      # ============================================================
      - name: Display summary results
        working-directory: benchmark
        run: |
          echo "=========================================="
          echo "Benchmark Results Summary"
          echo "=========================================="
          
          if [ -f "results/summary.json" ]; then
            echo ""
            echo "Summary JSON:"
            cat results/summary.json
            echo ""
          else
            echo "⚠ Warning: results/summary.json not found"
          fi
          
          echo ""
          echo "Generated visualizations:"
          if [ -d "results/visual" ]; then
            ls -lh results/visual/
          else
            echo "⚠ Warning: results/visual directory not found"
          fi
          
          echo ""
          echo "All result directories:"
          ls -lh results/ || echo "⚠ Warning: results directory not found"

      - name: Upload summary.json
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-summary
          path: benchmark/results/summary.json
          retention-days: 30
          if-no-files-found: warn

      - name: Upload visualization results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-visualizations
          path: benchmark/results/visual/
          retention-days: 30
          if-no-files-found: warn

      - name: Upload all results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-full
          path: benchmark/results/
          retention-days: 30
          if-no-files-found: warn

      - name: Get short SHA
        id: short-sha
        run: echo "sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Final status
        run: |
          echo ""
          echo "=========================================="
          echo "Workflow completed successfully!"
          echo "=========================================="
          echo "Commit: ${{ steps.short-sha.outputs.sha }}"
          echo "Check the 'Actions' tab to download artifacts"
          echo "=========================================="
